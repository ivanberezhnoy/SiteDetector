import { BumpSite, LoginConfig } from './types.ts';
import { newPage } from './utils/puppeteer.ts';
import { registry } from './functions/registry.ts';
import { SelectorNotFoundError } from './errors.ts';
import { delay, log } from './utils/utils.ts';
import { sendMessage } from './telegram.ts';
// --- helpers ---------------------------------------------------------------

async function waitVisible(
  page: Awaited<ReturnType<typeof newPage>>,
  selector: string,
  siteId: string,
  stage: 'modal' | 'username' | 'password'
) {
  try {
    await page.waitForSelector(selector, { timeout: 20_000, visible: true });
  } catch {
    throw new SelectorNotFoundError(siteId, selector, stage);
  }
}

async function safeClearAndType(
  page: Awaited<ReturnType<typeof newPage>>,
  selector: string,
  value: string
) {
  // –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∞–π—Ç–∞—Ö value –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –º–∞—Å–∫–æ–π/—Å–∫—Ä–∏–ø—Ç–æ–º ‚Äî —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏–º –Ω–∞–ø—Ä—è–º—É—é
  await page.$eval(
    selector,
    (el, v) => {
      const input = el as HTMLInputElement;
      input.focus();
      input.value = '';
      // —Ç—Ä–∏–≥–≥–µ—Ä–∏–º input/change –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç—É–ª–∫–∏—Ç–æ–≤
      input.dispatchEvent(new Event('input', { bubbles: true }));
      input.dispatchEvent(new Event('change', { bubbles: true }));
    },
    value
  );
  // –ó–∞—Ç–µ–º –ø–µ—á–∞—Ç–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–∏–º delay (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å js-–≤–∞–ª–∏–¥–∞—Ü–∏–∏)
  await page.type(selector, value, { delay: 20 });
}

async function waitAndType(
  page: Awaited<ReturnType<typeof newPage>>,
  selector: string,
  value: string,
  siteId: string,
  stage: 'username' | 'password'
) {
  await waitVisible(page, selector, siteId, stage);
  await safeClearAndType(page, selector, value);
}

async function clickOrThrow(
  page: Awaited<ReturnType<typeof newPage>>,
  selector: string,
  siteId: string,
  stage: 'open' | 'submit',
  navigates: boolean
) {
  // –ï—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É ‚Äî —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω –≤–∏–¥–∏–º
  try {
    await page.waitForSelector(selector, { timeout: 20_000, visible: true });
  } catch {
    throw new SelectorNotFoundError(siteId, selector, stage);
  }

  if (navigates) {
    // –í–∞–∂–Ω–æ: –∫–ª–∏–∫ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–≤–∏–º –≤ Promise.all, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    await Promise.all([
      page.waitForNavigation({ waitUntil: 'networkidle2' }),
      page.click(selector),
    ]).catch(() => {
      // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –æ—à–∏–±–∫–∞ (–Ω–∞ —Å–∞–π—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–æ–¥–∞–ª–∫–∞)
      // –ü—É—Å—Ç—å –¥–∞–ª—å—à–µ —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ (—á–µ—Ä–µ–∑ race —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª–∫–∏)
    });
  } else {
    await page.click(selector).catch(() => {
      throw new SelectorNotFoundError(siteId, selector, stage);
    });
  }
}

async function waitModalGone(
  page: Awaited<ReturnType<typeof newPage>>,
  modalSelector: string
) {
  // modal —Å–∫—Ä—ã–ª–∞—Å—å / —É–¥–∞–ª–µ–Ω–∞ –∏–∑ DOM
  await page.waitForFunction(
    (sel) => {
      const el = document.querySelector(sel) as HTMLElement | null;
      return !el || el.offsetParent === null;
    },
    { timeout: 15_000 },
    modalSelector
  );
}

// --- login flow ------------------------------------------------------------

async function doLogin(
  page: Awaited<ReturnType<typeof newPage>>,
  login: LoginConfig,
  siteId: string
) {
  await page.goto(login.url, { waitUntil: 'networkidle2' });

  // 1) –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞ (–º–æ–¥–∞–ª–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥)
  if (login.openSelector) {
    await clickOrThrow(page, login.openSelector, siteId, 'open', !!login.openClickNavigates);
    // –µ—Å–ª–∏ —ç—Ç–æ –º–æ–¥–∞–ª–∫–∞ ‚Äî –¥–æ–∂–¥—ë–º—Å—è —Ñ–æ—Ä–º—ã
    if (!login.openClickNavigates) {
      // House24: –º–æ–¥–∞–ª–∫–∞ #box-signin
      await waitVisible(page, '#box-signin', siteId, 'modal');
    }
  }

  // 2) –ü–æ–ª—è –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è (–ñ—ë—Å—Ç–∫–æ –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è)
  await waitAndType(page, login.usernameSelector, login.username, siteId, 'username');
  await waitAndType(page, login.passwordSelector, login.password, siteId, 'password');

  
  if (login.submitSelector) {
  
    await Promise.race([
      (async () => {
        await clickOrThrow(page, login.submitSelector!, siteId, 'submit', true);
      })(),
      page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 15_000 }).catch(() => null),
      waitModalGone(page, '#box-signin').catch(() => null),
    ]);
  } else {
    // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî Enter
    log('Press enter')
    await Promise.race([
      (async () => {
        await page.keyboard.press('Enter');
      })(),
      page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 15_000 }).catch(() => null),
      waitModalGone(page, '#box-signin').catch(() => null),
    ]);
  }
}

// --- public API ------------------------------------------------------------

export async function runBump(site: BumpSite): Promise<void> {
  const page = await newPage();
  var clicked = 0;
  try {
    await doLogin(page, site.login, site.id);

    for (const myUrl of site.myAdsUrls)
    {
      await delay(2000);
      await page.goto(myUrl, { waitUntil: 'networkidle2' });
      

      const fn = registry[site.function];
      if (!fn) {
        throw new Error(`Function '${site.function}' not found in registry`);
      }
      clicked = clicked + await fn(page, site, myUrl);
    }

    await delay(1200);
  
    if (clicked > 0) 
    {
      await sendMessage(`üîÅ ${site.id}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${clicked} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.`);
    } else 
    {
      await sendMessage(`‚ö†Ô∏è ${site.id}: –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å.`);
    }

  } 
  finally 
  {
    await page.close().catch(() => {});
  }
}
